[versions]

ktor = "2.1.2"

crashlyticskios = "0.6.0"
coroutines = "1.6.4"
coroutinesNativeMt = "1.6.0-native-mt"
dokka = "1.7.10"
#eygraberUri = "0.0.9"

kotlin = "1.7.20"
kotlinxDatetime = "0.4.0"
mokoParcelize = "0.8.0"
mokoResourceGenerator = "0.20.1"
sqlDelight = "1.5.4"
serialization = "1.4.1"

stately = "1.2.2"

napier = "2.5.0"
krypto = "3.3.0"
klock = "3.3.0"

koin = "3.3.2"
koinAndroid = "3.3.2"
koinCompose = "3.4.1"

multiplatformSettings = "1.0.0-RC"

# Gradle plugin
compileSdk = "33"
targetSdk = "31"
minSdk = "21"
buildTools = "30.0.2"
pluginGradle = "7.3.0"

[libraries]
plugin-dokka = { module = "org.jetbrains.dokka:dokka-gradle-plugin" , version.ref = "dokka" }
plugin-gradle = { module = "com.android.tools.build:gradle", version.ref = "pluginGradle" }
plugin-kotlin-gradle  = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
plugin-sqldelight-gradle = { module = "com.squareup.sqldelight:gradle-plugin", version.ref = "sqlDelight" }
plugin-kotlin-serialization = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
plugin-moko-resources-generator = { module = "dev.icerock.moko:resources-generator", version.ref = "mokoResourceGenerator"}

#eygraber-uri = { module = "com.eygraber:uri-kmp", version.ref = "eygraberUri" }
crashlyticskios = { module = "co.touchlab:crashkios", version.ref = "crashlyticskios" }

kotlin-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlin-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
kotlin-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
kotlin-coroutines-rx2 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-rx2", version.ref = "coroutines" }
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-stdlib-jdk7 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk7", version.ref = "kotlin" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }

stately-common = { module = "co.touchlab:stately-common", version.ref = "stately" }
stately-concurrency = { module = "co.touchlab:stately-concurrency", version.ref = "stately" }
stately-isolate = { module = "co.touchlab:stately-isolate", version.ref = "stately" }
stately-iso-collections = { module = "co.touchlab:stately-iso-collections", version.ref = "stately" }

krypto = { module = "com.soywiz.korlibs.krypto:krypto", version.ref = "krypto" }
klock = { module = "com.soywiz.korlibs.klock:klock", version.ref = "klock" }

sqldelight-runtime = { module = "com.squareup.sqldelight:runtime", version.ref = "sqlDelight" }
sqldelight-runtime-jvm = { module = "com.squareup.sqldelight:runtime-jvm", version.ref = "sqlDelight" }
sqldelight-coroutines-extensions = { module = "com.squareup.sqldelight:coroutines-extensions", version.ref = "sqlDelight" }
sqldelight-android-driver = { module = "com.squareup.sqldelight:android-driver", version.ref = "sqlDelight" }
sqldelight-native-driver = { module = "com.squareup.sqldelight:native-driver", version.ref = "sqlDelight" }

moko-parcelize = { module = "dev.icerock.moko:parcelize", version.ref = "mokoParcelize" }
moko-resource-generator = { module = "dev.icerock.moko:resources", version.ref = "mokoResourceGenerator" }
napier = { module = "io.github.aakira:napier", version.ref = "napier" }

ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-gson = { module = "io.ktor:ktor-serialization-gson", version.ref = "ktor" }
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-gson = { module = "io.ktor:ktor-serialization-gson", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }

koin = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin" }
#koin-ktor = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }

koin-android = { module = "io.insert-koin:koin-android", version.ref = "koinAndroid" }
koin-workmanager = { module = "io.insert-koin:koin-androidx-workmanager", version.ref = "koinAndroid" }
koin-navigation = { module = "io.insert-koin:koin-androidx-navigation", version.ref = "koinAndroid" }
koin-compose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koinCompose" }
koin-java = { module = "io.insert-koin:koin-android-compat", version.ref = "koinAndroid" }
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatformSettings" }
multiplatform-settings-datastore = { module = "com.russhwolf:multiplatform-settings-datastore", version.ref = "multiplatformSettings" }

[bundles]
stately = ["stately-common", "stately-concurrency", "stately-isolate", "stately-iso-collections"]
sqldelight = ["sqldelight-runtime", "sqldelight-coroutines-extensions"]
ktor = ["ktor-client-auth", "ktor-client-core", "ktor-client-logging", "ktor-client-json", "ktor-client-content-negotiation"]
ktor-android = ["ktor-client-android", "ktor-client-okhttp", "ktor-client-gson", "ktor-gson"]

koin = ["koin"]
koin-android = ["koin-android", "koin-workmanager", "koin-navigation", "koin-compose"]